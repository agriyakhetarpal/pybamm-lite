From e0ae057d63f27ec5bee46f302f482a152100ad99 Mon Sep 17 00:00:00 2001
From: Agriya Khetarpal <74401230+agriyakhetarpal@users.noreply.github.com>
Date: Thu, 21 Nov 2024 01:49:26 +0530
Subject: [PATCH] Find CasADi and OpenBLAS

---
 0001-Find-CasADi-and-OpenBLAS.patch | 69 +++++++++++++++++++++++++++++
 CMakeLists.txt                      | 43 ++++++++++++------
 2 files changed, 99 insertions(+), 13 deletions(-)
 create mode 100644 0001-Find-CasADi-and-OpenBLAS.patch

diff --git a/0001-Find-CasADi-and-OpenBLAS.patch b/0001-Find-CasADi-and-OpenBLAS.patch
new file mode 100644
index 000000000..3121f51b4
--- /dev/null
+++ b/0001-Find-CasADi-and-OpenBLAS.patch
@@ -0,0 +1,69 @@
+From 5e95011c7c55b94ce6b16d6c8d3b399a5e1f3aaf Mon Sep 17 00:00:00 2001
+From: Agriya Khetarpal <74401230+agriyakhetarpal@users.noreply.github.com>
+Date: Thu, 21 Nov 2024 01:49:26 +0530
+Subject: [PATCH] Find CasADi and OpenBLAS
+
+---
+ CMakeLists.txt | 31 +++++++++++++++++++++----------
+ 1 file changed, 21 insertions(+), 10 deletions(-)
+
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index 9a959d322..04dea82a6 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -113,16 +113,16 @@ endif()
+ 
+ # Use importlib to find the casadi path without importing it. This is useful
+ # to find the path for the build-time dependency, not the run-time dependency.
+-execute_process(
+-    COMMAND "${PYTHON_EXECUTABLE}" -c
+-    "import importlib.util; print(next(iter(importlib.util.find_spec('casadi').submodule_search_locations)))"
+-    OUTPUT_VARIABLE CASADI_DIR
+-    OUTPUT_STRIP_TRAILING_WHITESPACE)
+-
+-if (CASADI_DIR)
+-  file(TO_CMAKE_PATH ${CASADI_DIR} CASADI_DIR)
+-  message("Found Python casadi path: ${CASADI_DIR}")
+-endif()
++# execute_process(
++#     COMMAND "${PYTHON_EXECUTABLE}" -c
++#     "import importlib.util; print(next(iter(importlib.util.find_spec('casadi').submodule_search_locations)))"
++#     OUTPUT_VARIABLE CASADI_DIR
++#     OUTPUT_STRIP_TRAILING_WHITESPACE)
++
++# if (CASADI_DIR)
++#   file(TO_CMAKE_PATH ${CASADI_DIR} CASADI_DIR)
++#   message("Found Python casadi path: ${CASADI_DIR}")
++# endif()
+ 
+ if(${USE_PYTHON_CASADI})
+   message("Trying to link against Python casadi package")
+@@ -130,7 +130,10 @@ if(${USE_PYTHON_CASADI})
+ else()
+   message("Trying to link against any casadi package apart from the Python one")
+   set(CMAKE_IGNORE_PATH "${CASADI_DIR}/cmake")
++  if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
++    set(CMAKE_PREFIX_PATH "${WASM_LIBRARY_DIR}")
+   find_package(casadi CONFIG REQUIRED)
++  endif()
+ endif()
+ 
+ set_target_properties(
+@@ -146,6 +149,14 @@ message("SUNDIALS found in ${SUNDIALS_INCLUDE_DIR}: ${SUNDIALS_LIBRARIES}")
+ target_include_directories(idaklu PRIVATE ${SUNDIALS_INCLUDE_DIR})
+ target_link_libraries(idaklu PRIVATE ${SUNDIALS_LIBRARIES} casadi)
+ 
++# For BLAS under Emscripten, point to WASM_LIBRARY_DIR/lib and WASM_LIBRARY_DIR/include,
++# and assume that the BLAS vendor is OpenBLAS.
++if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
++  set(BLAS_LIBRARIES "${WASM_LIBRARY_DIR}/lib/libopenblas.so")
++  include_directories("${WASM_LIBRARY_DIR}/include")
++endif()
++
++
+ # link suitesparse
+ # if using vcpkg, use config mode to
+ # find suitesparse. Otherwise, use FindSuiteSparse module
+-- 
+2.39.3 (Apple Git-146)
+
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9a959d322..1c5d2a368 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -111,26 +111,16 @@ if (NOT DEFINED USE_PYTHON_CASADI)
   set(USE_PYTHON_CASADI TRUE)
 endif()
 
-# Use importlib to find the casadi path without importing it. This is useful
-# to find the path for the build-time dependency, not the run-time dependency.
-execute_process(
-    COMMAND "${PYTHON_EXECUTABLE}" -c
-    "import importlib.util; print(next(iter(importlib.util.find_spec('casadi').submodule_search_locations)))"
-    OUTPUT_VARIABLE CASADI_DIR
-    OUTPUT_STRIP_TRAILING_WHITESPACE)
-
-if (CASADI_DIR)
-  file(TO_CMAKE_PATH ${CASADI_DIR} CASADI_DIR)
-  message("Found Python casadi path: ${CASADI_DIR}")
-endif()
-
 if(${USE_PYTHON_CASADI})
   message("Trying to link against Python casadi package")
   find_package(casadi CONFIG PATHS ${CASADI_DIR} REQUIRED NO_DEFAULT_PATH)
 else()
   message("Trying to link against any casadi package apart from the Python one")
   set(CMAKE_IGNORE_PATH "${CASADI_DIR}/cmake")
+  if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
+    set(CMAKE_PREFIX_PATH "${WASM_LIBRARY_DIR}")
   find_package(casadi CONFIG REQUIRED)
+  endif()
 endif()
 
 set_target_properties(
@@ -146,6 +136,28 @@ message("SUNDIALS found in ${SUNDIALS_INCLUDE_DIR}: ${SUNDIALS_LIBRARIES}")
 target_include_directories(idaklu PRIVATE ${SUNDIALS_INCLUDE_DIR})
 target_link_libraries(idaklu PRIVATE ${SUNDIALS_LIBRARIES} casadi)
 
+# For BLAS under Emscripten, point to WASM_LIBRARY_DIR/lib and WASM_LIBRARY_DIR/include,
+# and assume that the BLAS vendor is OpenBLAS.
+
+
+if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
+  # Set BLAS variables early
+  set(BLA_VENDOR OpenBLAS)
+  set(BLAS_LIBRARIES "${WASM_LIBRARY_DIR}/lib/libopenblas.so")
+  set(BLAS_FOUND TRUE)
+  set(BLAS_INCLUDE_DIRS "${WASM_LIBRARY_DIR}/include")
+  # Also set LAPACK since SuiteSparse might need it
+  set(LAPACK_LIBRARIES "${WASM_LIBRARY_DIR}/lib/libopenblas.so")
+  set(LAPACK_FOUND TRUE)
+  set(LAPACK_INCLUDE_DIRS "${WASM_LIBRARY_DIR}/include")
+
+  include_directories(${BLAS_INCLUDE_DIRS})
+  # Force CMake to skip its own BLAS find routines
+  # since we're setting it manually. This should
+  # not be necessary, though.
+  set(CMAKE_DISABLE_FIND_PACKAGE_BLAS TRUE)
+endif()
+
 # link suitesparse
 # if using vcpkg, use config mode to
 # find suitesparse. Otherwise, use FindSuiteSparse module
@@ -158,6 +170,11 @@ endif()
 include_directories(${SuiteSparse_INCLUDE_DIRS})
 target_link_libraries(idaklu PRIVATE ${SuiteSparse_LIBRARIES})
 
+# If using Emscripten, explicitly link against BLAS
+if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
+  target_link_libraries(idaklu PRIVATE ${BLAS_LIBRARIES})
+endif()
+
 # IREE (MLIR compiler and runtime library) build settings
 if(${PYBAMM_IDAKLU_EXPR_IREE} STREQUAL "ON" )
   set(IREE_BUILD_COMPILER ON)
-- 
2.39.3 (Apple Git-146)

